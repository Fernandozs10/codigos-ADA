#include <iostream>
#include <vector>
#include <queue>
#include <limits>
using namespace std;

class Grafo {
    int numVertices; // Número de vértices del grafo
    vector<vector<pair<int, int>>> adjList; // Lista de adyacencia

public:
    Grafo(int numVertices) {
        this->numVertices = numVertices;
        adjList.resize(numVertices);
    }

    void agregarArista(int origen, int destino, int peso) {
        adjList[origen].push_back({destino, peso});
    }

    vector<int> dijkstra(int origen) {
        vector<int> distancias(numVertices, numeric_limits<int>::max()); // Distancias mínimas desde el vértice de origen
        distancias[origen] = 0; // La distancia desde el origen a sí mismo es 0

        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq; // Cola de prioridad para seleccionar el vértice con la distancia mínima

        pq.push({0, origen});

        while (!pq.empty()) {
            int distanciaActual = pq.top().first;
            int verticeActual = pq.top().second;
            pq.pop();

            // Si la distancia actual es mayor que la distancia almacenada, ignoramos el vértice
            if (distanciaActual > distancias[verticeActual]) {
                continue;
            }

            // Recorremos los vecinos del vértice actual
            for (const auto& vecino : adjList[verticeActual]) {
                int verticeVecino = vecino.first;
                int pesoArista = vecino.second;

                int distanciaNueva = distancias[verticeActual] + pesoArista;

                // Si la distancia nueva es menor a la distancia almacenada, actualizamos la distancia y agregamos el vértice a la cola de prioridad
                if (distanciaNueva < distancias[verticeVecino]) {
                    distancias[verticeVecino] = distanciaNueva;
                    pq.push({distanciaNueva, verticeVecino});
                }
            }
        }

        return distancias;
    }
};

int main() {
    int numVertices = 6;
    Grafo grafo(numVertices);

    grafo.agregarArista(0, 1, 2);
    grafo.agregarArista(0, 2, 5);
    grafo.agregarArista(1, 2, 1);
    grafo.agregarArista(1, 3, 6);
    grafo.agregarArista(2, 3, 1);
    grafo.agregarArista(2, 4, 4);
    grafo.agregarArista(3, 4, 3);
    grafo.agregarArista(3, 5, 7);
    grafo.agregarArista(4, 5, 2);

    int origen = 0;

    vector<int> distancias = grafo.dijkstra(origen);

    cout << "Distancias más cortas desde el vértice " << origen << ":" << endl;
    for (int i = 0; i < numVertices; ++i) {
        cout << "Hacia vértice " << i << ": " << distancias[i] << endl;
    }

    return 0;
}
