#include <iostream>
#include <vector>
using namespace std;

// Estructura para representar un objeto
struct Objeto {
    int peso;
    int valor;
};

// Función que resuelve el problema de la mochila
int knapsack(int capacidad, vector<Objeto>& objetos) {
    int n = objetos.size();
    vector<vector<int>> dp(n + 1, vector<int>(capacidad + 1, 0));

    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= capacidad; j++) {
            if (objetos[i - 1].peso <= j) {
                dp[i][j] = max(objetos[i - 1].valor + dp[i - 1][j - objetos[i - 1].peso], dp[i - 1][j]);
            }
            else {
                dp[i][j] = dp[i - 1][j];
            }
        }
    }

    return dp[n][capacidad];
}

int main() {
    int capacidadMochila = 50; // Capacidad de la mochila
    vector<Objeto> objetos = {{10, 60}, {20, 100}, {30, 120}}; // Lista de objetos

    int maxValor = knapsack(capacidadMochila, objetos);

    cout << "El máximo valor que se puede obtener es: " << maxValor << endl;

    return 0;
}
