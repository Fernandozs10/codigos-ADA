#include <iostream>
#include <vector>
#include <limits>
using namespace std;

#define INF numeric_limits<int>::max()

// Función para encontrar los caminos más cortos entre todos los pares de vértices
void floydWarshall(vector<vector<int>>& grafo) {
    int n = grafo.size();

    // Inicializar la matriz de distancias con los pesos de las aristas
    vector<vector<int>> distancias(grafo);

    // Calcular los caminos más cortos
    for (int k = 0; k < n; k++) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                // Si el vértice k mejora el camino entre i y j, actualizar la distancia
                if (distancias[i][k] != INF && distancias[k][j] != INF && distancias[i][k] + distancias[k][j] < distancias[i][j]) {
                    distancias[i][j] = distancias[i][k] + distancias[k][j];
                }
            }
        }
    }

    // Imprimir las distancias mínimas entre todos los pares de vértices
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (distancias[i][j] == INF) {
                cout << "INF ";
            } else {
                cout << distancias[i][j] << " ";
            }
        }
        cout << endl;
    }
}

int main() {
    int n = 4; // Número de vértices

    vector<vector<int>> grafo = {
        {0, 5, INF, 10},
        {INF, 0, 3, INF},
        {INF, INF, 0, 1},
        {INF, INF, INF, 0}
    };

    floydWarshall(grafo);

    return 0;
}
